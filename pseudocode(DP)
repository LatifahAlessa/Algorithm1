

function DPOptimizePortfolio(List<Asset> assets, int totalInvestment, double riskTolerance) {
  // Initialize the dynamic programming table
  Portfolio[][][] dp = new Portfolio[assets.get(0).units + 1][assets.get(1).units + 1][assets.get(2).units + 1];

  // Iterate over all possible combinations of asset quantities
  for (int i = 0; i <= assets.get(0).units; i++) {
    for (int j = 0; j <= assets.get(1).units; j++) {
      for (int k =0; k <= assets.get(2).units; k++) {
        // Check if the current combination is valid
        if (i + j + k == totalInvestment) {
          // Create a new portfolio with the current combination
          Portfolio portfolio = new Portfolio(i, j, k);
          portfolio.calculatePortfolioEfficiency(assets, totalInvestment);

          // Check if the current portfolio is better than the current optimal portfolio
          if (portfolio.risk <= riskTolerance && portfolio.expectedReturn > dp[i][j][k].expectedReturn) {
            dp[i][j][k] = portfolio;
          }
        }
      }
    }
  }

  // Find the optimal portfolio in the dynamic programming table
  for (int i = 0; i <= assets.get(0).units; i++) {
    for (int j = 0; j <= assets.get(1).units; j++) {
      for (int k = 0; k <= assets.get(2).units; k++) {
        if (dp[i][j][k].expectedReturn > dp[optimalPortfolio.allocation[0]][optimalPortfolio.allocation[1]][optimalPortfolio.allocation[2]].expectedReturn) {
          optimalPortfolio = dp[i][j][k];
        }
      }
    }
  }

  // Return the optimal portfolio
  return optimalPortfolio;
}
