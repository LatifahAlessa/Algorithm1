pseudocode algorithm for finding the composition of an optimal allocation of assets using Dynamic Programming Paradigm: 

function DPOptimizePortfolio(assets, totalInvestment, riskTolerance):
    optimalPortfolio = null
    maxReturn = 0
    dp = 2D array with dimensions (number of assets + 1) x (total investment + 1)
    allocations = 3D array with dimensions (number of assets) x (number of assets + 1) x (total investment + 1)

    for i from 0 to number of assets:
        for j from 0 to total investment:
            dp[i][j] = Portfolio(0, 0, 0) // Initialize portfolio objects
            dp[i][j].expectedReturn = 0
            dp[i][j].risk = 0

    for i from 0 to total investment:
        for k from 0 to number of assets:
            allocations[k][0][i] = 0

    for i from 0 to number of assets:
        for k from 0 to number of assets:
            allocations[k][0][i] = 0

    for i from 1 to number of assets:
        for j from 1 to total investment:
            maxUnits = minimum(assets[i-1].units, j)
            for k from 0 to maxUnits:
                riskLevel = (k * assets[i-1].individualrisk) / totalInvestment
                expectedReturn = (k * assets[i-1].expectedReturn) / totalInvestment
                maxvalue = maximum(dp[i][j].expectedReturn, dp[i-1][j-k].expectedReturn + expectedReturn)
                
                if maxvalue == dp[i][j].expectedReturn:
                    continue
                
                if dp[i-1][j-k].risk + riskLevel <= riskTolerance:
                    dp[i][j].expectedReturn = maxvalue
                    dp[i][j].risk = dp[i-1][j-k].risk + riskLevel
                    for m from 0 to number of assets:
                        allocations[m][i][j] = allocations[m][i-1][j-k] + (i-m-1 == 0 ? k : 0)

    set assets of dp[number of assets][total investment] using allocations

    return dp[number of assets][total investment]
